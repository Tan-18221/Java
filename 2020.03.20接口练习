/*
接口是一种公共的规范标准
只要符合规范标准就可以通用
接口就是多个类的公共数据规范
接口是一种引用类型，最重要的内容就是抽象方法
接口基本格式
public interface 接口名称{}
 */

package ta;
public abstract class tu {
    public static void main(String[] args) {
        nn ka=new nn();
        ka.kk();
    }
    }
 package ta;
/*
接口定义抽象方法
public abstract 返回值类型 方法名称（参数列表）;
注意事项：
1。接口当中的抽象方法，修饰符必须是两个固定的关键字：public abstract
2。这两个关键字 可以选择性省略
接口使用步骤
1。接口不能直接使用，必须有一个实现类来实现该接口
格式
public class 实现类名称 implements 接口名称{}
2.接口的实现类必须覆盖重写接口中的所有的抽象方法
去掉abstract，加上方法体，加上方法体大括号
3。创建实现类对象，进行使用
*/
public interface hj {
    //这是一个抽象方法
    public abstract void kk();
}

package ta;
public class nn implements hj {

    @Override
    public void kk() {
        System.out.println("第一个方法");
    }
}

package ta;
/*
接口定义默认方法
格式
public default 返回值类型 方法名称（参数列表）{方法体}
接口当中的默认方法，可以解决接口升级的问题。默认方法会被实现类继承下去
1.接口的默认方法，可以通过接口实现类对象，直接调用
2。接口的默认方法，也可以被接口实现类进行覆盖重写
 */
public interface tu {
    //抽象方法
    public abstract void sa();
    //新添加的方法改成默认方法，就不用重新覆盖重写多次
    public default void fo(){
        System.out.println("新添加的默认方法");
    }
    }
    
package ta;
public class hg implements tu {
    @Override
    public void sa() {
        System.out.println("实现了方法2");
    }
}

package ta;
public class hn {
    public static void main(String[] args) {
        hg x=new hg();
        x.fo();
    }
}

package ta;
/*
接口定义静态方法
格式
public static 返回值类型 方法名称（参数列表）{方法体}
 */
public interface tu {
    public static void sta(){
        System.out.println("这是接口的静态方法");
    }
}


package ta;
public class hg implements tu {

}

package ta;
/*
不能通过接口实现类的对象来调用接口当中的静态方法
通过接口名称，直接调用其中的静态方法
格式
接口名称.静态方法名（参数）；
 */
public class hn {
    public static void main(String[] args) {
        hg ip=new hg();
        tu.sta();

    }
}

package ta;
/*
我们需要抽取一个共有方法，用来解决两个默认方法之间重复代码问题
但是这个共有方法不应该让实现类使用，应该是私有化的
接口中定义私有方法
1.普通私有方法，解决多个默认方法间重复代码问题
格式
private 返回值类型 方法名称（参数列表）{方法体}
2。静态私有方法，解决多个静态方法之间重复代码问题
格式
private static 返回值类型 方法名称（参数列表）{方法体}
 */
public interface tu {
    public default void sta(){
        sta3();
    }
    public default void sta2(){
        sta3();
    }
    private  void sta3(){
        System.out.println("m默认方法3");
    }
}

package ta;
/*
接口中也可以定义"成员变量"，但是必须使用public static final三个关键字进行修饰
从效果上看，这其实就是接口的常量
格式
public static final 数据类型 常量名称=数据值
注意：
一旦使用final关键字修饰，说明不可改变
接口当中的常量，可以省略public static final,但是如果不写也是这样
接口中的常量必须进行赋值，不能不赋值
接口中常量的名称使用完全大写的字母
 */
public interface tu {
    //这是一个常量，一旦赋值，不可以修改
    public static final int NUM=10;
}

package ta;
public class hg  {
    public static void main(String[] args) {
        System.out.println(tu.NUM);
    }
}

/*
使用接口时
1。接口没有静态代码块或者构造方法
2。一个类的直接父类是唯一的，但是一个类可以同时实现多个接口
格式：
public class 父类名 implements 接口名1，接口名2{
   //覆盖重写所有抽象方法
 }
3。如果实现类多个接口存在重复抽象方法，只需重写一次即可
4。如果实现类没有覆盖重写所有接口中的所有抽象方法，那么实现类必须是一个抽象类
5。如果实现类多个接口中有多个默认方法，那么实现类一定要对冲突的方法覆盖重写
6。一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先使用父类当中的方法
 */
 
 /*
1。类与类直接单继承，直接父类只有一个
2。类与接口直接是多实现的，一个类可以实现多个接口
3。接口和接口直接是多继承的
 */
 
 














