<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Function对象</title>
    <script>
        /*
        function对象 函数方法对象
        1.创建：
          1.var fun=new Function(形式参数列表，方法体）；
          2.主要使用 function 方法名称（形式参数列表）{方法体
         }
          3.var 方法名=function（形式参数列表）{方法体}
        3.属性
        4.特点
         方法定义，形式参数的类型不用写,返回值也可以不写
         方法是一个对象，如果定义名称相同的方法，会覆盖
         方法的调用只和方法名称有关，和参数列表无关
         在方法声明中，有一个隐藏的内置对象，arguments封装所有的实际参数
        5.调用：
         方法名称（实际参数列表）；
         */
        var f=new Function("a","b","alert(a)");
        f(3);
        alert(f.length);
        function f2(a,b){
            alert(a+b);
        }
        f2(3,4);
        function add(){
            var sum=0;
            for (var i = 0; i < arguments.length ; i++) {
                sum+=arguments[i];
            }
            return sum;
        }
        var sum=add(1,2,3,4)
        alert(sum);
    </script>
</head>
<body>

</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Array数组对象</title>
    <script>
        /*
        1.创建
             1. var arr=new Array(元素列表）
             2. var arr=new Array(默认长度）
             3. var arr=[元素列表];
        2.方法
             join（参数）：将数组中的元素按照指定的分隔符拼接为字符串
             push (参数）：向数组尾部添加元素
        4.特点：
             数组元素类型可变，任意数据类型
             数组长度可变

         */
        var a=new Array(1,2,3);
        var b=new Array(5);
        var c=[1,1,1,1]

        document.write(b+"<br>")
        document.write(join()+"<br>")
        b.push(11);
    </script>
</head>
<body>

</body>
</html>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Date对象</title>
    <script>
        /*
        1.创建
           var date=new Date();
        2.方法
           toLocaleString():返回当前date对象对应时间本地字符串格式
           getTime():获取毫秒值，返回当前时间到1970年1月1日零点毫秒值差
         */
        var d=new Date();
        document.write(d+"<br>");
        document.write(d.toLocaleString()+"<br>");
        document.write(d.getTime())
    </script>
</head>
<body>

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Math对象</title>
    <script>
        /*
        1.创建
              不用创建 直接使用
              Math.方法名（）；

        2.方法
              random():返回0-1直接的随机数 含0不含1
              ceil():对数进行上舍入
              floor():对数进行下舍入
              round():四舍五入
        3.属性：
              PI
         */
        document.write(Math.PI);
        document.write(Math.random());
       var num= Math.floor((Math.random()*100))+1;
       document.write(num);
    </script>
</head>
<body>

</body>
</html>



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>RegExp对象</title>
    <script>
        /*
        正则表达式：定义字符串的组成规则
          1.单个字符
          【】
          \d 单个数字字符
          \w 单个单词字符
          2.量词符号
          ？表示0次或一次
          * 出现0次或多次
          + 出现1次或多次
          {m<n} 表示 m<=数量<=n
          开始结束
          3.创建
           var reg=new RegExp("正则表达式");
           var reg=/正则表达式/;
          4.方法
            test（参数）验证指定字符串是否符合规范
         */
        var reg = new RegExp("\w{6,12}");

    </script>
</head>
<body>

</body>
</html>




