package ta;

public class list {
    private String name;
    private int age;
    static String room;
    public list(){

    }

    public list(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}

package ta;
/*
如果一个成员变量使用了static关键字，那么这个变量不再属于对象自己，而是属于所在的类，多个对象共享一个数据
 */
public class tu {
    public static void main(String[] args) {
        list k=new list("guo",19);
        k.room="101";
        System.out.println("姓名："+k.getName()+"年龄："+k.getAge()+k.room);
        list b=new list("huang",20);
        System.out.println("姓名："+b.getName()+"年龄："+b.getAge()+k.room);

    }
    }
    
    
    
package ta;

public class tu {

        public void jk () {
            System.out.println("这是一个普通的成员方法");
        }
        public static void kl () {
            System.out.println("这是一个静态方法");
        }


    }

package ta;
/*
一旦使用static修饰成员方法，那么就成为了静态方法，静态方法不属于对象，而是属于类
如果没有static关键字，那么必须要首先创建对象，然后通过对象才能使用它
无论是成员变量，还是成员方法，如果有了static，都推荐使用类名称进行调用
静态变量：
类名称.静态变量
静态方法调用：
类名称.静态方法（）
注意；
静态只能直接访问静态，不能直接访问非静态
静态方法中不能用this
 */
public class list {
    public static void main(String[] args) {
        tu n = new tu();
        n.jk();
        tu.kl();//静态方法直接调用，不用创建对象
    }
    }
    
  package ta;
/*
静态代码块的格式是：
public class 类名称{
       static{
       //静态代码块的内容
       }
       }
特点：当第一次使用到本类时，静态代码块执行唯一的一次
静态的内容优先于非静态，所以静态代码块比构造方法先执行
用途
用来一次性的对静态成员变量进行赋值
 */
public class tu {
    static{
        System.out.println("静态");
    }
    public tu(){
        System.out.println("构造");
    }
    }
    
    
package ta;
public class list {
    public static void main(String[] args) {
        tu k=new tu();
        tu n=new tu();
    }
    }
    
  
